// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/modelos/detalleVenta.dart';
import 'data/modelos/producto.dart';
import 'domain/entities/almacen.dart';
import 'domain/entities/cliente.dart';
import 'domain/entities/domicilio.dart';
import 'domain/entities/lista_precios.dart';
import 'domain/entities/moneda.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7484616887157383674),
      name: 'Producto',
      lastPropertyId: const obx_int.IdUid(5, 5471326019472904540),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2231261685834143860),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6912341984798452992),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6389919069208010615),
            name: 'precio',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5471326019472904540),
            name: 'stock',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8321215789789525065),
      name: 'DetalleVenta',
      lastPropertyId: const obx_int.IdUid(7, 2712813858697669180),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8503066495780579305),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6061606775136171451),
            name: 'fecha',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2799609472521758098),
            name: 'total',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2712813858697669180),
            name: 'cambio',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 6359937038915105604),
            name: 'metodoPago',
            targetId: const obx_int.IdUid(5, 3718697418139948114)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(3, 497114194251762227),
            name: 'productos',
            targetId: const obx_int.IdUid(6, 4892755308081149155))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 3718697418139948114),
      name: 'MetodoPago',
      lastPropertyId: const obx_int.IdUid(5, 4874227048877063833),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2604588701438866511),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2268194850490062830),
            name: 'tipo',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3669921919589658736),
            name: 'index',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 584725373687852078),
            name: 'cantidad',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4874227048877063833),
            name: 'detalleVentaId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6205319674731735682),
            relationTarget: 'DetalleVenta')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 4892755308081149155),
      name: 'ProductoVenta',
      lastPropertyId: const obx_int.IdUid(4, 455948542356927870),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6573543781710029667),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7452063620447716998),
            name: 'cantidad',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 455948542356927870),
            name: 'productoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 5330336020163595312),
            relationTarget: 'Producto')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 649894725669401420),
      name: 'AlmacenOB',
      lastPropertyId: const obx_int.IdUid(4, 6089652187228181785),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 665356247144477715),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8430010257155893357),
            name: 'id_almacen',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7273617085864027720),
            name: 'nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6089652187228181785),
            name: 'nombreOrden',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 3626376435523889908),
      name: 'ClienteOB',
      lastPropertyId: const obx_int.IdUid(8, 7587379021585509692),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2835365377011843179),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1298401753864072056),
            name: 'id_Cliente',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2844637594268579481),
            name: 'razon_Social',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8486385861869782630),
            name: 'RFC',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3220417654895882137),
            name: 'descuento',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2797873885638046248),
            name: 'NO_Plazo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4806562283124953518),
            name: 'id_lista',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7587379021585509692),
            name: 'cfdi',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 4708300723691210105),
      name: 'DomicilioOB',
      lastPropertyId: const obx_int.IdUid(9, 3771099292028894637),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 529320971051509633),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5516739200039473504),
            name: 'id_Cliente',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4787603239013891519),
            name: 'domicilio',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4582908192566151408),
            name: 'colonia',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5331175377577538602),
            name: 'ciudad',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1671989235004930879),
            name: 'c_p',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4561234903878727121),
            name: 'plazo',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4952716969853888965),
            name: 'estado',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 5423158290382525108),
      name: 'MonedaOB',
      lastPropertyId: const obx_int.IdUid(4, 6579855836660767329),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 9068137208845697005),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4080028441192703974),
            name: 'IdMoneda',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1841145490792732237),
            name: 'Nombre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6579855836660767329),
            name: 'Clave_SAT',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 8228667060596273833),
      name: 'ListaPreciosOB',
      lastPropertyId: const obx_int.IdUid(3, 801292113415071148),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6849903648372613332),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2972124335702303935),
            name: 'ID_LISTA',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 801292113415071148),
            name: 'NOMBRE',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(17, 8228667060596273833),
      lastIndexId: const obx_int.IdUid(5, 1523992679733062373),
      lastRelationId: const obx_int.IdUid(3, 497114194251762227),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        3807589492740891168,
        7553638658740325030,
        2618534719023183125,
        6044803119585627736,
        8562209558861134359,
        2685113298195122620,
        8445508603454430333,
        2364328694780968366
      ],
      retiredIndexUids: const [5952045895011704472, 1523992679733062373],
      retiredPropertyUids: const [
        3966460281539830874,
        309569487768899047,
        7515698616284220654,
        5319326040372713525,
        2693550361474404303,
        161122530268866708,
        3732337356324359087,
        6997495146643040923,
        3987775346174637591,
        571093646507608801,
        2128574782096673623,
        4883964891603577158,
        4623794115690852862,
        622841640104325076,
        8086132544932515407,
        5949299312807597966,
        5451659090798268031,
        1367253959276942724,
        506705020379297629,
        8957335018744951317,
        1178733507536972118,
        2213809829522932036,
        3844393313392856704,
        8493969082512250317,
        5970552839109547795,
        5445084950327428714,
        3028007861569142821,
        1602236996237018053,
        1532858591499094733,
        5397271877330751070,
        6218991353277281182,
        2025851178277614019,
        2533076472043565450,
        1816584554135474556,
        1741327023174282854,
        3512172121482794868,
        1477963254607905966,
        6753228068736413987,
        2260858984323344298,
        4706190721114220474,
        7154152480954986841,
        5270499872387694498,
        5797288676294510682,
        1405347482737780790,
        3771099292028894637
      ],
      retiredRelationUids: const [7334335245334417135],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Producto: obx_int.EntityDefinition<Producto>(
        model: _entities[0],
        toOneRelations: (Producto object) => [],
        toManyRelations: (Producto object) => {},
        getId: (Producto object) => object.id,
        setId: (Producto object, int id) {
          object.id = id;
        },
        objectToFB: (Producto object, fb.Builder fbb) {
          final nombreOffset =
              object.nombre == null ? null : fbb.writeString(object.nombre!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, nombreOffset);
          fbb.addFloat64(3, object.precio);
          fbb.addInt64(4, object.stock);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final precioParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final stockParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Producto(nombreParam, precioParam, stockParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DetalleVenta: obx_int.EntityDefinition<DetalleVenta>(
        model: _entities[1],
        toOneRelations: (DetalleVenta object) => [],
        toManyRelations: (DetalleVenta object) => {
              obx_int.RelInfo<DetalleVenta>.toMany(2, object.id):
                  object.metodoPago,
              obx_int.RelInfo<DetalleVenta>.toMany(3, object.id):
                  object.productos
            },
        getId: (DetalleVenta object) => object.id,
        setId: (DetalleVenta object, int id) {
          object.id = id;
        },
        objectToFB: (DetalleVenta object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.fecha?.millisecondsSinceEpoch);
          fbb.addFloat64(5, object.total);
          fbb.addFloat64(6, object.cambio);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fechaValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final fechaParam = fechaValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(fechaValue);
          final totalParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final cambioParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = DetalleVenta(fechaParam, totalParam, cambioParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          obx_int.InternalToManyAccess.setRelInfo<DetalleVenta>(
              object.metodoPago,
              store,
              obx_int.RelInfo<DetalleVenta>.toMany(2, object.id));
          obx_int.InternalToManyAccess.setRelInfo<DetalleVenta>(
              object.productos,
              store,
              obx_int.RelInfo<DetalleVenta>.toMany(3, object.id));
          return object;
        }),
    MetodoPago: obx_int.EntityDefinition<MetodoPago>(
        model: _entities[2],
        toOneRelations: (MetodoPago object) => [object.detalleVenta],
        toManyRelations: (MetodoPago object) => {},
        getId: (MetodoPago object) => object.id,
        setId: (MetodoPago object, int id) {
          object.id = id;
        },
        objectToFB: (MetodoPago object, fb.Builder fbb) {
          final tipoOffset =
              object.tipo == null ? null : fbb.writeString(object.tipo!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tipoOffset);
          fbb.addInt64(2, object.index);
          fbb.addFloat64(3, object.cantidad);
          fbb.addInt64(4, object.detalleVenta.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tipoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final indexParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final cantidadParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = MetodoPago(tipoParam, indexParam, cantidadParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.detalleVenta.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.detalleVenta.attach(store);
          return object;
        }),
    ProductoVenta: obx_int.EntityDefinition<ProductoVenta>(
        model: _entities[3],
        toOneRelations: (ProductoVenta object) => [object.producto],
        toManyRelations: (ProductoVenta object) => {},
        getId: (ProductoVenta object) => object.id,
        setId: (ProductoVenta object, int id) {
          object.id = id;
        },
        objectToFB: (ProductoVenta object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.cantidad);
          fbb.addInt64(3, object.producto.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final cantidadParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = ProductoVenta(cantidadParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.producto.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.producto.attach(store);
          return object;
        }),
    AlmacenOB: obx_int.EntityDefinition<AlmacenOB>(
        model: _entities[4],
        toOneRelations: (AlmacenOB object) => [],
        toManyRelations: (AlmacenOB object) => {},
        getId: (AlmacenOB object) => object.id,
        setId: (AlmacenOB object, int id) {
          object.id = id;
        },
        objectToFB: (AlmacenOB object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final nombreOrdenOffset = fbb.writeString(object.nombreOrden);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.id_almacen);
          fbb.addOffset(2, nombreOffset);
          fbb.addOffset(3, nombreOrdenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final id_almacenParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final nombreOrdenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = AlmacenOB(
              id: idParam,
              id_almacen: id_almacenParam,
              nombre: nombreParam,
              nombreOrden: nombreOrdenParam);

          return object;
        }),
    ClienteOB: obx_int.EntityDefinition<ClienteOB>(
        model: _entities[5],
        toOneRelations: (ClienteOB object) => [],
        toManyRelations: (ClienteOB object) => {},
        getId: (ClienteOB object) => object.id,
        setId: (ClienteOB object, int id) {
          object.id = id;
        },
        objectToFB: (ClienteOB object, fb.Builder fbb) {
          final razon_SocialOffset = fbb.writeString(object.razon_Social);
          final RFCOffset = fbb.writeString(object.RFC);
          final cfdiOffset = fbb.writeString(object.cfdi);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.id_Cliente);
          fbb.addOffset(2, razon_SocialOffset);
          fbb.addOffset(3, RFCOffset);
          fbb.addFloat64(4, object.descuento);
          fbb.addInt64(5, object.NO_Plazo);
          fbb.addInt64(6, object.id_lista);
          fbb.addOffset(7, cfdiOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final id_ClienteParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final razon_SocialParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final RFCParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descuentoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final NO_PlazoParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final id_listaParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final cfdiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = ClienteOB(
              id: idParam,
              id_Cliente: id_ClienteParam,
              razon_Social: razon_SocialParam,
              RFC: RFCParam,
              descuento: descuentoParam,
              NO_Plazo: NO_PlazoParam,
              id_lista: id_listaParam,
              cfdi: cfdiParam);

          return object;
        }),
    DomicilioOB: obx_int.EntityDefinition<DomicilioOB>(
        model: _entities[6],
        toOneRelations: (DomicilioOB object) => [],
        toManyRelations: (DomicilioOB object) => {},
        getId: (DomicilioOB object) => object.id,
        setId: (DomicilioOB object, int id) {
          object.id = id;
        },
        objectToFB: (DomicilioOB object, fb.Builder fbb) {
          final domicilioOffset = fbb.writeString(object.domicilio);
          final coloniaOffset = fbb.writeString(object.colonia);
          final ciudadOffset = fbb.writeString(object.ciudad);
          final c_pOffset = fbb.writeString(object.c_p);
          final estadoOffset = fbb.writeString(object.estado);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.id_Cliente);
          fbb.addOffset(2, domicilioOffset);
          fbb.addOffset(3, coloniaOffset);
          fbb.addOffset(4, ciudadOffset);
          fbb.addOffset(5, c_pOffset);
          fbb.addInt64(6, object.plazo);
          fbb.addOffset(7, estadoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final id_ClienteParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final domicilioParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final coloniaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final ciudadParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final c_pParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final plazoParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final estadoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final object = DomicilioOB(
              id: idParam,
              id_Cliente: id_ClienteParam,
              domicilio: domicilioParam,
              colonia: coloniaParam,
              ciudad: ciudadParam,
              c_p: c_pParam,
              plazo: plazoParam,
              estado: estadoParam);

          return object;
        }),
    MonedaOB: obx_int.EntityDefinition<MonedaOB>(
        model: _entities[7],
        toOneRelations: (MonedaOB object) => [],
        toManyRelations: (MonedaOB object) => {},
        getId: (MonedaOB object) => object.id,
        setId: (MonedaOB object, int id) {
          object.id = id;
        },
        objectToFB: (MonedaOB object, fb.Builder fbb) {
          final NombreOffset = fbb.writeString(object.Nombre);
          final Clave_SATOffset = fbb.writeString(object.Clave_SAT);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.IdMoneda);
          fbb.addOffset(2, NombreOffset);
          fbb.addOffset(3, Clave_SATOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final IdMonedaParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final NombreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final Clave_SATParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = MonedaOB(
              id: idParam,
              IdMoneda: IdMonedaParam,
              Nombre: NombreParam,
              Clave_SAT: Clave_SATParam);

          return object;
        }),
    ListaPreciosOB: obx_int.EntityDefinition<ListaPreciosOB>(
        model: _entities[8],
        toOneRelations: (ListaPreciosOB object) => [],
        toManyRelations: (ListaPreciosOB object) => {},
        getId: (ListaPreciosOB object) => object.id,
        setId: (ListaPreciosOB object, int id) {
          object.id = id;
        },
        objectToFB: (ListaPreciosOB object, fb.Builder fbb) {
          final NOMBREOffset = fbb.writeString(object.NOMBRE);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.ID_LISTA);
          fbb.addOffset(2, NOMBREOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final ID_LISTAParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final NOMBREParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = ListaPreciosOB(
              id: idParam, ID_LISTA: ID_LISTAParam, NOMBRE: NOMBREParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Producto] entity fields to define ObjectBox queries.
class Producto_ {
  /// See [Producto.id].
  static final id =
      obx.QueryIntegerProperty<Producto>(_entities[0].properties[0]);

  /// See [Producto.nombre].
  static final nombre =
      obx.QueryStringProperty<Producto>(_entities[0].properties[1]);

  /// See [Producto.precio].
  static final precio =
      obx.QueryDoubleProperty<Producto>(_entities[0].properties[2]);

  /// See [Producto.stock].
  static final stock =
      obx.QueryIntegerProperty<Producto>(_entities[0].properties[3]);
}

/// [DetalleVenta] entity fields to define ObjectBox queries.
class DetalleVenta_ {
  /// See [DetalleVenta.id].
  static final id =
      obx.QueryIntegerProperty<DetalleVenta>(_entities[1].properties[0]);

  /// See [DetalleVenta.fecha].
  static final fecha =
      obx.QueryDateProperty<DetalleVenta>(_entities[1].properties[1]);

  /// See [DetalleVenta.total].
  static final total =
      obx.QueryDoubleProperty<DetalleVenta>(_entities[1].properties[2]);

  /// See [DetalleVenta.cambio].
  static final cambio =
      obx.QueryDoubleProperty<DetalleVenta>(_entities[1].properties[3]);

  /// see [DetalleVenta.metodoPago]
  static final metodoPago = obx.QueryRelationToMany<DetalleVenta, MetodoPago>(
      _entities[1].relations[0]);

  /// see [DetalleVenta.productos]
  static final productos = obx.QueryRelationToMany<DetalleVenta, ProductoVenta>(
      _entities[1].relations[1]);
}

/// [MetodoPago] entity fields to define ObjectBox queries.
class MetodoPago_ {
  /// See [MetodoPago.id].
  static final id =
      obx.QueryIntegerProperty<MetodoPago>(_entities[2].properties[0]);

  /// See [MetodoPago.tipo].
  static final tipo =
      obx.QueryStringProperty<MetodoPago>(_entities[2].properties[1]);

  /// See [MetodoPago.index].
  static final index =
      obx.QueryIntegerProperty<MetodoPago>(_entities[2].properties[2]);

  /// See [MetodoPago.cantidad].
  static final cantidad =
      obx.QueryDoubleProperty<MetodoPago>(_entities[2].properties[3]);

  /// See [MetodoPago.detalleVenta].
  static final detalleVenta = obx.QueryRelationToOne<MetodoPago, DetalleVenta>(
      _entities[2].properties[4]);
}

/// [ProductoVenta] entity fields to define ObjectBox queries.
class ProductoVenta_ {
  /// See [ProductoVenta.id].
  static final id =
      obx.QueryIntegerProperty<ProductoVenta>(_entities[3].properties[0]);

  /// See [ProductoVenta.cantidad].
  static final cantidad =
      obx.QueryIntegerProperty<ProductoVenta>(_entities[3].properties[1]);

  /// See [ProductoVenta.producto].
  static final producto = obx.QueryRelationToOne<ProductoVenta, Producto>(
      _entities[3].properties[2]);
}

/// [AlmacenOB] entity fields to define ObjectBox queries.
class AlmacenOB_ {
  /// See [AlmacenOB.id].
  static final id =
      obx.QueryIntegerProperty<AlmacenOB>(_entities[4].properties[0]);

  /// See [AlmacenOB.id_almacen].
  static final id_almacen =
      obx.QueryIntegerProperty<AlmacenOB>(_entities[4].properties[1]);

  /// See [AlmacenOB.nombre].
  static final nombre =
      obx.QueryStringProperty<AlmacenOB>(_entities[4].properties[2]);

  /// See [AlmacenOB.nombreOrden].
  static final nombreOrden =
      obx.QueryStringProperty<AlmacenOB>(_entities[4].properties[3]);
}

/// [ClienteOB] entity fields to define ObjectBox queries.
class ClienteOB_ {
  /// See [ClienteOB.id].
  static final id =
      obx.QueryIntegerProperty<ClienteOB>(_entities[5].properties[0]);

  /// See [ClienteOB.id_Cliente].
  static final id_Cliente =
      obx.QueryIntegerProperty<ClienteOB>(_entities[5].properties[1]);

  /// See [ClienteOB.razon_Social].
  static final razon_Social =
      obx.QueryStringProperty<ClienteOB>(_entities[5].properties[2]);

  /// See [ClienteOB.RFC].
  static final RFC =
      obx.QueryStringProperty<ClienteOB>(_entities[5].properties[3]);

  /// See [ClienteOB.descuento].
  static final descuento =
      obx.QueryDoubleProperty<ClienteOB>(_entities[5].properties[4]);

  /// See [ClienteOB.NO_Plazo].
  static final NO_Plazo =
      obx.QueryIntegerProperty<ClienteOB>(_entities[5].properties[5]);

  /// See [ClienteOB.id_lista].
  static final id_lista =
      obx.QueryIntegerProperty<ClienteOB>(_entities[5].properties[6]);

  /// See [ClienteOB.cfdi].
  static final cfdi =
      obx.QueryStringProperty<ClienteOB>(_entities[5].properties[7]);
}

/// [DomicilioOB] entity fields to define ObjectBox queries.
class DomicilioOB_ {
  /// See [DomicilioOB.id].
  static final id =
      obx.QueryIntegerProperty<DomicilioOB>(_entities[6].properties[0]);

  /// See [DomicilioOB.id_Cliente].
  static final id_Cliente =
      obx.QueryIntegerProperty<DomicilioOB>(_entities[6].properties[1]);

  /// See [DomicilioOB.domicilio].
  static final domicilio =
      obx.QueryStringProperty<DomicilioOB>(_entities[6].properties[2]);

  /// See [DomicilioOB.colonia].
  static final colonia =
      obx.QueryStringProperty<DomicilioOB>(_entities[6].properties[3]);

  /// See [DomicilioOB.ciudad].
  static final ciudad =
      obx.QueryStringProperty<DomicilioOB>(_entities[6].properties[4]);

  /// See [DomicilioOB.c_p].
  static final c_p =
      obx.QueryStringProperty<DomicilioOB>(_entities[6].properties[5]);

  /// See [DomicilioOB.plazo].
  static final plazo =
      obx.QueryIntegerProperty<DomicilioOB>(_entities[6].properties[6]);

  /// See [DomicilioOB.estado].
  static final estado =
      obx.QueryStringProperty<DomicilioOB>(_entities[6].properties[7]);
}

/// [MonedaOB] entity fields to define ObjectBox queries.
class MonedaOB_ {
  /// See [MonedaOB.id].
  static final id =
      obx.QueryIntegerProperty<MonedaOB>(_entities[7].properties[0]);

  /// See [MonedaOB.IdMoneda].
  static final IdMoneda =
      obx.QueryIntegerProperty<MonedaOB>(_entities[7].properties[1]);

  /// See [MonedaOB.Nombre].
  static final Nombre =
      obx.QueryStringProperty<MonedaOB>(_entities[7].properties[2]);

  /// See [MonedaOB.Clave_SAT].
  static final Clave_SAT =
      obx.QueryStringProperty<MonedaOB>(_entities[7].properties[3]);
}

/// [ListaPreciosOB] entity fields to define ObjectBox queries.
class ListaPreciosOB_ {
  /// See [ListaPreciosOB.id].
  static final id =
      obx.QueryIntegerProperty<ListaPreciosOB>(_entities[8].properties[0]);

  /// See [ListaPreciosOB.ID_LISTA].
  static final ID_LISTA =
      obx.QueryIntegerProperty<ListaPreciosOB>(_entities[8].properties[1]);

  /// See [ListaPreciosOB.NOMBRE].
  static final NOMBRE =
      obx.QueryStringProperty<ListaPreciosOB>(_entities[8].properties[2]);
}
